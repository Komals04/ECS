import boto3
import csv
from datetime import datetime, timedelta

def get_target_response_time(cw_client, target_group_arn):
    try:
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=3)

        response = cw_client.get_metric_statistics(
            Namespace='AWS/ApplicationELB',
            MetricName='TargetResponseTime',
            Dimensions=[{'Name': 'TargetGroup', 'Value': target_group_arn}],
            StartTime=start_time,
            EndTime=end_time,
            Period=300,  # 5-minute interval
            Statistics=['Average'],
            Unit='Seconds'
        )

        if 'Datapoints' in response:
            # Sort the datapoints by timestamp and get the latest value
            datapoints = sorted(response['Datapoints'], key=lambda x: x['Timestamp'], reverse=True)
            return datapoints[0]['Average']
        else:
            return 'N/A'  # If no datapoints found

    except Exception as e:
        print(f"Error retrieving TargetResponseTime: {e}")
        return 'N/A'

def get_load_balancers(ecs_client, cw_client):
    try:
        response = ecs_client.list_clusters()
        clusters = response['clusterArns']

        lb_details = []

        for cluster_arn in clusters:
            response = ecs_client.list_services(cluster=cluster_arn)
            services = response['serviceArns']

            for service_arn in services:
                response = ecs_client.describe_services(cluster=cluster_arn, services=[service_arn])
                load_balancers = response['services'][0].get('loadBalancers', [])

                for lb in load_balancers:
                    if lb['targetGroupArn']:
                        target_group_arn = lb['targetGroupArn']
                        response_time = get_target_response_time(cw_client, target_group_arn)

                        lb_details.append({
                            'ClusterName': cluster_arn.split('/')[-1],
                            'LoadBalancerArn': lb['targetGroupArn'],
                            'ResponseTime': response_time
                        })

        return lb_details

    except Exception as e:
        print(f"Error retrieving load balancers: {e}")
        return []

def export_to_csv(data, filename):
    if not data:
        print("No data to export.")
        return

    fieldnames = ['ClusterName', 'LoadBalancerArn', 'ResponseTime']

    with open(filename, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for row in data:
            writer.writerow(row)

if __name__ == "__main__":
    ecs_client = boto3.client('ecs')
    cw_client = boto3.client('cloudwatch')

    lb_details = get_load_balancers(ecs_client, cw_client)

    # Replace 'lb_details.csv' with your desired filename
    export_to_csv(lb_details, 'lb_details.csv')
