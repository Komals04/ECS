import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def describe_capacity_providers(ecs_client):
    try:
        response = ecs_client.describe_capacity_providers()
        capacity_providers = response.get('capacityProviders', [])
        return capacity_providers
    except Exception as e:
        print(f"Error occurred while describing capacity providers: {e}")
        return []

def describe_clusters(ecs_client):
    try:
        response = ecs_client.describe_clusters()
        clusters = response.get('clusters', [])
        return clusters
    except Exception as e:
        print(f"Error occurred while describing clusters: {e}")
        return []

def describe_container_instances(ecs_client):
    try:
        response = ecs_client.describe_container_instances()
        container_instances = response.get('containerInstances', [])
        return container_instances
    except Exception as e:
        print(f"Error occurred while describing container instances: {e}")
        return []

def describe_services(ecs_client):
    try:
        response = ecs_client.describe_services()
        services = response.get('services', [])
        return services
    except Exception as e:
        print(f"Error occurred while describing services: {e}")
        return []

def describe_task_definition(ecs_client):
    try:
        response = ecs_client.describe_task_definition()
        task_definitions = response.get('taskDefinitions', [])
        return task_definitions
    except Exception as e:
        print(f"Error occurred while describing task definitions: {e}")
        return []

def describe_task_sets(ecs_client):
    try:
        response = ecs_client.describe_task_sets()
        task_sets = response.get('taskSets', [])
        return task_sets
    except Exception as e:
        print(f"Error occurred while describing task sets: {e}")
        return []

def describe_tasks(ecs_client):
    try:
        response = ecs_client.describe_tasks()
        tasks = response.get('tasks', [])
        return tasks
    except Exception as e:
        print(f"Error occurred while describing tasks: {e}")
        return []

def main():
    try:
        regions = ['us-east-1', 'us-east-2']  # Add your desired regions here
        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')

        for region in regions:
            ecs_client = boto3.client('ecs', region_name=region)

            # Describe ECS resources
            capacity_providers = describe_capacity_providers(ecs_client)
            clusters = describe_clusters(ecs_client)
            container_instances = describe_container_instances(ecs_client)
            services = describe_services(ecs_client)
            task_definitions = describe_task_definition(ecs_client)
            task_sets = describe_task_sets(ecs_client)
            tasks = describe_tasks(ecs_client)

            # Write data to CSV files
            with open(f'ecs_insights_{region}_{timestamp}.csv', 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['ResourceType', 'ResourceData'])

                for resource_data in [capacity_providers, clusters, container_instances, services, task_definitions, task_sets, tasks]:
                    for resource in resource_data:
                        writer.writerow([type(resource).__name__, resource])

            print(f"Completed exporting ECS insights for region {region}")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
