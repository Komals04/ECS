import boto3
import csv
from datetime import datetime

def get_ecs_clusters():
    ecs_client = boto3.client('ecs')
    clusters = ecs_client.list_clusters()['clusterArns']
    return clusters

def get_ecs_services(cluster_arn):
    ecs_client = boto3.client('ecs')
    services = ecs_client.list_services(cluster=cluster_arn)['serviceArns']
    return services

def get_task_definition(service_arn):
    ecs_client = boto3.client('ecs')
    service = ecs_client.describe_services(services=[service_arn])['services'][0]
    task_definition_arn = service['taskDefinition']
    task_definition = ecs_client.describe_task_definition(taskDefinition=task_definition_arn)
    return task_definition

def get_load_balancer_names(task_definition):
    load_balancers = []
    for container_definition in task_definition['taskDefinition']['containerDefinitions']:
        if 'loadBalancers' in container_definition:
            for lb in container_definition['loadBalancers']:
                load_balancers.append(lb['containerName'])
    return load_balancers

def get_cluster_name(cluster_arn):
    return cluster_arn.split('/')[-1]

def main():
    try:
        regions = ['us-east-1', 'us-east-2', 'us-west-2']

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'ecs_load_balancers_{timestamp}.csv'

        fieldnames = ['Cluster Name', 'Service Name', 'Load Balancer Name']

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for region in regions:
                boto3.setup_default_session(region_name=region)
                clusters = get_ecs_clusters()

                for cluster_arn in clusters:
                    cluster_name = get_cluster_name(cluster_arn)
                    services = get_ecs_services(cluster_arn)

                    for service_arn in services:
                        service_name = service_arn.split('/')[-1]
                        task_definition = get_task_definition(service_arn)
                        load_balancer_names = get_load_balancer_names(task_definition)

                        for lb_name in load_balancer_names:
                            writer.writerow({'Cluster Name': cluster_name, 'Service Name': service_name, 'Load Balancer Name': lb_name})
                            print(f"Exported load balancer {lb_name} for service {service_name} in cluster {cluster_name} in region {region}")

        print(f'Completed exporting ECS load balancers to {filename}.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
