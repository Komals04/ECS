import boto3
import csv
from datetime import datetime

def describe_clusters(ecs_client):
    response = ecs_client.describe_clusters()
    return response['clusters']

def describe_container_instances(ecs_client, cluster_name):
    response = ecs_client.describe_container_instances(cluster=cluster_name)
    return response['containerInstances']

def describe_services(ecs_client, cluster_name):
    response = ecs_client.describe_services(cluster=cluster_name)
    return response['services']

def describe_task_definition(ecs_client, task_definition_arn):
    response = ecs_client.describe_task_definition(taskDefinition=task_definition_arn)
    return response['taskDefinition']

def describe_tasks(ecs_client, cluster_name):
    response = ecs_client.list_tasks(cluster=cluster_name)
    task_arns = response['taskArns']
    tasks = []
    for task_arn in task_arns:
        task = ecs_client.describe_tasks(cluster=cluster_name, tasks=[task_arn])['tasks'][0]
        tasks.append(task)
    return tasks

def list_task_definitions(ecs_client, family_prefix):
    response = ecs_client.list_task_definitions(familyPrefix=family_prefix)
    return response['taskDefinitionArns']

def main():
    try:
        # Specify your AWS region here
        region = 'us-east-1'
        
        ecs_client = boto3.client('ecs', region_name=region)
        
        clusters = describe_clusters(ecs_client)
        if not clusters:
            print("No ECS clusters found.")
            return

        container_instances = describe_container_instances(ecs_client, clusters[0]['clusterName'])
        if not container_instances:
            print("No container instances found.")
            return

        services = describe_services(ecs_client, clusters[0]['clusterName'])
        if not services:
            print("No ECS services found.")
            return

        task_definitions = list_task_definitions(ecs_client, family_prefix='')
        if not task_definitions:
            print("No task definitions found.")
            return

        tasks = describe_tasks(ecs_client, clusters[0]['clusterName'])

        # Write to CSV
        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'ecs_insights_{timestamp}.csv'

        with open(filename, 'w', newline='') as csvfile:
            fieldnames = ['ResourceType', 'ResourceName', 'Details']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for cluster in clusters:
                writer.writerow({'ResourceType': 'Cluster', 'ResourceName': cluster['clusterName'], 'Details': str(cluster)})
            for instance in container_instances:
                writer.writerow({'ResourceType': 'ContainerInstance', 'ResourceName': instance['containerInstanceArn'], 'Details': str(instance)})
            for service in services:
                writer.writerow({'ResourceType': 'Service', 'ResourceName': service['serviceName'], 'Details': str(service)})
            for task_definition_arn in task_definitions:
                task_definition = describe_task_definition(ecs_client, task_definition_arn)
                writer.writerow({'ResourceType': 'TaskDefinition', 'ResourceName': task_definition['taskDefinitionArn'], 'Details': str(task_definition)})
            for task in tasks:
                writer.writerow({'ResourceType': 'Task', 'ResourceName': task['taskArn'], 'Details': str(task)})

        print(f'Completed fetching ECS insights. Results saved to {filename}')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
