import boto3
import csv
from datetime import datetime, timedelta

def list_ecs_clusters(region):
    client = boto3.client('ecs', region_name=region)
    response = client.list_clusters()
    return response['clusterArns']

def list_target_groups(load_balancer_arn, region):
    client = boto3.client('elbv2', region_name=region)
    response = client.describe_target_groups(LoadBalancerArn=load_balancer_arn)
    return [tg['TargetGroupArn'] for tg in response['TargetGroups']]

def get_load_balancer_arn(cluster_arn, region):
    client = boto3.client('ecs', region_name=region)
    response = client.describe_clusters(clusters=[cluster_arn])
    if 'clusters' in response and response['clusters']:
        cluster = response['clusters'][0]
        return [cluster.get('defaultCapacityProviderStrategy', {}).get('capacityProvider')]
    return None

def get_cloudwatch_metrics(cluster_arn, target_group_arn, start_time, end_time, region):
    client = boto3.client('cloudwatch', region_name=region)

    metrics = [
        {
            'Namespace': 'AWS/ECS',
            'MetricName': 'RequestCount',
            'Dimensions': [
                {
                    'Name': 'ClusterName',
                    'Value': cluster_arn
                }
            ],
            'Statistic': 'Sum',
            'Unit': 'Count'
        },
        {
            'Namespace': 'AWS/ApplicationELB',
            'MetricName': 'RequestCountPerTarget',
            'Dimensions': [
                {
                    'Name': 'TargetGroup',
                    'Value': target_group_arn
                }
            ],
            'Statistic': 'Sum',
            'Unit': 'Count'
        },
        {
            'Namespace': 'AWS/ApplicationELB',
            'MetricName': 'TargetResponseTime',
            'Dimensions': [
                {
                    'Name': 'TargetGroup',
                    'Value': target_group_arn
                }
            ],
            'Statistic': 'Average',
            'Unit': 'Seconds'
        }
    ]

    data = []
    for metric in metrics:
        response = client.get_metric_statistics(
            Namespace=metric['Namespace'],
            MetricName=metric['MetricName'],
            Dimensions=metric['Dimensions'],
            StartTime=start_time,
            EndTime=end_time,
            Period=3600,
            Statistics=[metric['Statistic']]
        )
        for datapoint in response['Datapoints']:
            value = datapoint.get(metric['Statistic'])
            if value is not None:
                data.append({
                    'ClusterName': cluster_arn,
                    'TargetGroup': target_group_arn,
                    'MetricName': metric['MetricName'],
                    'Timestamp': datapoint['Timestamp'].strftime('%Y-%m-%d %H:%M:%S'),
                    'Value': value
                })
    return data

def save_to_csv(data, filename):
    with open(filename, 'w', newline='') as csvfile:
        fieldnames = ['ClusterName', 'TargetGroup', 'MetricName', 'Timestamp', 'Value']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for row in data:
            writer.writerow(row)

def main(region):
    clusters = list_ecs_clusters(region)
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours=1)

    all_metrics_data = []
    for cluster_arn in clusters:
        lb_arn = get_load_balancer_arn(cluster_arn, region)
        if lb_arn:
            for target_group_arn in list_target_groups(lb_arn[0], region):
                metrics_data = get_cloudwatch_metrics(cluster_arn, target_group_arn, start_time, end_time, region)
                all_metrics_data.extend(metrics_data)

    filename = f'ecs_clusters_metrics_{region}.csv'
    save_to_csv(all_metrics_data, filename)
    print(f"Metrics data saved to {filename}")

if __name__ == "__main__":
    region = 'us-east-1'
    main(region)
