import boto3
import csv
from datetime import datetime, timedelta

def write_to_csv(filename, headers, rows):
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(headers)
        writer.writerows(rows)

def get_ecs_clusters():
    ecs_client = boto3.client('ecs')
    clusters = ecs_client.list_clusters()['clusterArns']
    return clusters

def get_load_balancers(cluster_arn):
    ecs_client = boto3.client('ecs')
    services = ecs_client.list_services(cluster=cluster_arn)['serviceArns']
    elbv2_client = boto3.client('elbv2')
    load_balancers = []

    for service_arn in services:
        response = ecs_client.describe_services(cluster=cluster_arn, services=[service_arn])
        service = response['services'][0]
        for lb in service.get('loadBalancers', []):
            if 'targetGroupArn' in lb:  # Check if targetGroupArn exists
                target_group_arn = lb['targetGroupArn']
                response = elbv2_client.describe_target_groups(TargetGroupArns=[target_group_arn])
                target_group_info = response['TargetGroups'][0]
                load_balancers.append(target_group_info['LoadBalancerArns'][0])

    return load_balancers

def get_metrics(load_balancer_arn, start_time, end_time):
    cloudwatch_client = boto3.client('cloudwatch')
    response = cloudwatch_client.get_metric_statistics(
        Namespace='AWS/ApplicationELB',
        MetricName='RequestCountPerTarget',
        Dimensions=[{'Name': 'LoadBalancer', 'Value': load_balancer_arn}],
        StartTime=start_time,
        EndTime=end_time,
        Period=86400,  # 24 hours
        Statistics=['Sum']
    )
    if 'Datapoints' in response:
        return response['Datapoints'][0]['Sum']
    else:
        return 0

def main():
    regions = ['us-east-1', 'us-east-2', 'us-west-2']

    # Prepare data for CSV
    headers = ['Region', 'ECS Cluster Name', 'Load Balancer ARN', 'Total Request Count in 24hrs']
    rows = []

    for region in regions:
        print(f"Processing region {region}...")
        boto3.setup_default_session(region_name=region)
        clusters = get_ecs_clusters()

        for cluster_arn in clusters:
            cluster_name = cluster_arn.split('/')[-1]
            print(f"Retrieving load balancers for ECS cluster {cluster_name} in region {region}...")
            load_balancers = get_load_balancers(cluster_arn)
            print(f"Found {len(load_balancers)} load balancers for ECS cluster {cluster_name}")

            for lb_arn in load_balancers:
                request_count = get_metrics(lb_arn, datetime.utcnow() - timedelta(days=1), datetime.utcnow())
                rows.append([region, cluster_name, lb_arn, request_count])

    filename = 'ecs_load_balancer_metrics.csv'
    write_to_csv(filename, headers, rows)

    print(f'Data saved to {filename}')

if __name__ == "__main__":
    main()
