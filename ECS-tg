import boto3
import csv
from datetime import datetime, timedelta
import time

def get_ecs_clusters(region):
    ecs_client = boto3.client('ecs', region_name=region)
    response = ecs_client.list_clusters()
    return response.get('clusterArns', [])

def get_ecs_target_groups(cluster_arn, region):
    elbv2_client = boto3.client('elbv2', region_name=region)
    response = elbv2_client.describe_target_groups()
    return [tg['TargetGroupArn'] for tg in response['TargetGroups'] if cluster_arn in tg.get('LoadBalancerArns', [])]

def get_ecs_target_group_request_count(cluster_name, target_group_arn, region):
    cloudwatch_client = boto3.client('cloudwatch', region_name=region)
    
    metric_name = 'RequestCountPerTarget'
    namespace = 'AWS/ApplicationELB'
    period = 3600  # 1 hour
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours=24)  # Fetch data for the last 24 hours
    
    retry_count = 0
    max_retries = 5
    while retry_count < max_retries:
        try:
            response = cloudwatch_client.get_metric_statistics(
                Namespace=namespace,
                MetricName=metric_name,
                Dimensions=[{'Name': 'TargetGroup', 'Value': target_group_arn}],
                StartTime=start_time,
                EndTime=end_time,
                Period=period,
                Statistics=['Sum']
            )
            datapoints = response.get('Datapoints', [])
            total_request_count = sum([datapoint['Sum'] for datapoint in datapoints])
            return total_request_count
        except cloudwatch_client.exceptions.ThrottlingException as e:
            print(f"Throttling error occurred: {e}")
            backoff_time = 2 ** retry_count  # Exponential backoff
            print(f"Retrying in {backoff_time} seconds...")
            time.sleep(backoff_time)
            retry_count += 1
    return 0

def main():
    try:
        regions = ['us-east-1', 'us-east-2', 'us-west-2']  # Hardcoded regions

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        csv_file = f'ecs_target_group_requests_{timestamp}.csv'  # CSV file for ECS target group requests

        fieldnames = ['Region', 'Cluster Name', 'Target Group ARN', 'Total Requests']

        with open(csv_file, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for region in regions:
                ecs_clusters = get_ecs_clusters(region)
                for cluster_arn in ecs_clusters:
                    cluster_name = cluster_arn.split('/')[-1]
                    target_groups = get_ecs_target_groups(cluster_arn, region)
                    for target_group_arn in target_groups:
                        total_requests = get_ecs_target_group_request_count(cluster_name, target_group_arn, region)
                        writer.writerow({
                            'Region': region,
                            'Cluster Name': cluster_name,
                            'Target Group ARN': target_group_arn,
                            'Total Requests': total_requests
                        })

        print(f'Data saved to {csv_file}')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
