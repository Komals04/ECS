import boto3
import csv
from datetime import datetime, timedelta

def get_ecs_clusters(region):
    """
    Retrieves a list of ECS clusters in the specified region.
    
    Args:
    - region: AWS region
    
    Returns:
    - List of ECS cluster ARNs.
    """
    ecs_client = boto3.client('ecs', region_name=region)
    response = ecs_client.list_clusters()
    return response.get('clusterArns', [])

def get_ecs_target_groups(cluster_arn):
    """
    Retrieves a list of target groups associated with the specified ECS cluster.
    
    Args:
    - cluster_arn: ARN of the ECS cluster.
    
    Returns:
    - List of target group ARNs.
    """
    ecs_client = boto3.client('ecs')
    response = ecs_client.describe_clusters(clusters=[cluster_arn])
    return [tg['targetGroupArn'] for tg in response['clusters'][0]['attachments']]

def get_ecs_target_group_request_count(cluster_name, target_group_arn, region):
    """
    Retrieves the total request count per target group for ECS.
    
    Args:
    - cluster_name: Name of the ECS cluster.
    - target_group_arn: ARN of the target group associated with ECS service.
    - region: AWS region
    
    Returns:
    - Total request count for the target group.
    """
    cloudwatch_client = boto3.client('cloudwatch', region_name=region)
    
    # Define metric parameters
    metric_name = 'RequestCountPerTarget'
    namespace = 'AWS/ApplicationELB'
    dimensions = [
        {
            'Name': 'TargetGroup',
            'Value': target_group_arn
        },
        {
            'Name': 'LoadBalancer',
            'Value': 'app/' + cluster_name + '/*'
        }
    ]
    
    # Retrieve metric data
    response = cloudwatch_client.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'm1',
                'MetricStat': {
                    'Metric': {
                        'Namespace': namespace,
                        'MetricName': metric_name,
                        'Dimensions': dimensions
                    },
                    'Period': 86400,  # 1 day in seconds
                    'Stat': 'Sum',  # You can change this to other stats like Average, Maximum, etc.
                },
                'ReturnData': True
            },
        ],
        StartTime=(datetime.utcnow() - timedelta(days=7)),  # Adjust the time window as per your requirement
        EndTime=datetime.utcnow(),
    )
    
    # Extract request count
    if 'Datapoints' in response['MetricDataResults'][0]:
        datapoints = response['MetricDataResults'][0]['Datapoints']
        total_request_count = sum([datapoint['Sum'] for datapoint in datapoints])
        return total_request_count
    else:
        return 0  # No data available

# Define regions
regions = ['us-east-1', 'us-east-2', 'us-west-2']

# Prepare data for CSV
csv_data = [['Region', 'Cluster Name', 'Target Group ARN', 'Total Requests']]

for region in regions:
    ecs_clusters = get_ecs_clusters(region)
    for cluster_arn in ecs_clusters:
        cluster_name = cluster_arn.split('/')[-1]
        target_groups = get_ecs_target_groups(cluster_arn)
        for target_group_arn in target_groups:
            total_requests = get_ecs_target_group_request_count(cluster_name, target_group_arn, region)
            csv_data.append([region, cluster_name, target_group_arn, total_requests])

# Write data to CSV file
csv_file = 'ecs_target_group_requests.csv'
with open(csv_file, 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(csv_data)

print(f'Data saved to {csv_file}')
